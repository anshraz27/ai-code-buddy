import os
from sqlalchemy import create_engine, Column, Integer, String, Text, ForeignKey, Enum
from sqlalchemy.orm import sessionmaker, relationship, declarative_base
from sqlalchemy.pool import StaticPool
import enum
from dotenv import load_dotenv
load_dotenv()


# Ensure you have installed a PostgreSQL driver, e.g.:
# pip install psycopg2-binary
DATABASE_URL = os.getenv("DATABASE_URL")

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

class ProjectStatus(enum.Enum):
    PENDING = "PENDING"
    IN_PROGRESS = "IN_PROGRESS"
    COMPLETED = "COMPLETED"


class TaskStatus(enum.Enum):
    PENDING = "PENDING"
    IN_PROGRESS = "IN_PROGRESS"
    PENDING_REVIEW = "PENDING_REVIEW"
    REJECTED = "REJECTED"
    COMPLETED = "COMPLETED"
    FAILED_TESTS = "FAILED_TESTS"

class Project(Base):
    """Represents a single project generated by the user."""
    __tablename__ = "projects"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    description = Column(Text)
    techstack = Column(String)
    features = Column(Text)  # Storing list as JSON string
    status = Column(Enum(ProjectStatus), default=ProjectStatus.PENDING)
    tasks = relationship("Task", back_populates="project", cascade="all, delete-orphan")


class Task(Base):
    """Represents a single implementation task within a project."""
    __tablename__ = "tasks"
    id = Column(Integer, primary_key=True, index=True)
    project_id = Column(Integer, ForeignKey("projects.id"))
    filepath = Column(String)
    task_description = Column(Text)
    status = Column(Enum(TaskStatus), default=TaskStatus.PENDING)
    project = relationship("Project", back_populates="tasks")


def create_db_and_tables():
    """Initializes the database and tables."""
    Base.metadata.create_all(bind=engine)